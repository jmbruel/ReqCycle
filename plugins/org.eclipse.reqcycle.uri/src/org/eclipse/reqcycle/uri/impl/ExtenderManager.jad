// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ExtenderManager.java

package org.eclipse.reqcycle.uri.impl;

import com.google.common.base.*;
import com.google.common.cache.*;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import java.net.URI;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import org.eclipse.core.runtime.*;
import org.eclipse.reqcycle.uri.services.IReachableExtender;
import org.eclipse.ziggurat.inject.ZigguratInject;

public class ExtenderManager
{
    private class Pair
    {

        public boolean equals(Object arg0)
        {
            if(arg0 instanceof Pair)
            {
                Pair pair = (Pair)arg0;
                return Objects.equal(pair.uri, uri) && Objects.equal(pair.originalObject, originalObject);
            } else
            {
                return Objects.equal(arg0, this);
            }
        }

        public int hashCode()
        {
            return Objects.hashCode(new Object[] {
                originalObject, uri
            });
        }

        URI uri;
        Object originalObject;
        final ExtenderManager this$0;

        private Pair()
        {
            this$0 = ExtenderManager.this;
            super();
        }

        Pair(Pair pair)
        {
            this();
        }
    }


    public ExtenderManager()
    {
        cache = CacheBuilder.newBuilder().expireAfterAccess(10L, TimeUnit.MINUTES).build(new CacheLoader() {

            public Iterable load(final Pair pair)
                throws Exception
            {
                return Iterables.filter(ExtenderManager.allRegistered, new Predicate() {

                    public boolean apply(IReachableExtender ext)
                    {
                        return ext.handles(pair.uri, pair.originalObject);
                    }

                    public volatile boolean apply(Object obj)
                    {
                        return apply((IReachableExtender)obj);
                    }

                    final _cls1 this$1;
                    private final Pair val$pair;

                    
                    {
                        this$1 = _cls1.this;
                        pair = pair1;
                        super();
                    }
                }
);
            }

            public volatile Object load(Object obj)
                throws Exception
            {
                return load((Pair)obj);
            }

            final ExtenderManager this$0;

            
            {
                this$0 = ExtenderManager.this;
                super();
            }
        }
);
    }

    public Iterable getExtenders(URI uri, Object originalObject)
    {
        Pair pair = new Pair(null);
        pair.uri = uri;
        pair.originalObject = originalObject;
        try
        {
            return (Iterable)cache.get(pair);
        }
        catch(ExecutionException _ex)
        {
            return Lists.newArrayList();
        }
    }

    private static List getAllRegistered()
    {
        return Lists.newArrayList(Iterables.filter(Iterables.transform(Arrays.asList(Platform.getExtensionRegistry().getConfigurationElementsFor("org.eclipse.reqcycle.uri", EXT_EXTENDER_NAME)), new Function() {

            public IReachableExtender apply(IConfigurationElement conf)
            {
                IReachableExtender ext = null;
                try
                {
                    ext = (IReachableExtender)conf.createExecutableExtension("instance");
                    ZigguratInject.inject(new Object[] {
                        ext
                    });
                }
                catch(CoreException _ex) { }
                return ext;
            }

            public volatile Object apply(Object obj)
            {
                return apply((IConfigurationElement)obj);
            }

        }
), Predicates.notNull()));
    }

    private static String EXT_EXTENDER_NAME = "reachableExtender";
    private static List allRegistered = getAllRegistered();
    Cache cache;


}
